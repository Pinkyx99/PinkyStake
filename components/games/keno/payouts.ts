
export type RiskLevel = 'Classic' | 'Low' | 'Medium' | 'High';

// Payout structure: PAYOUTS[riskLevel][numbersPicked][hits] = multiplier
export const PAYOUTS: Record<RiskLevel, Record<number, Record<number, number>>> = {
  Low: {
    1: { 1: 2.5 },
    2: { 1: 1, 2: 4 },
    3: { 2: 2, 3: 15 },
    4: { 2: 1.5, 3: 5, 4: 25 },
    5: { 3: 2, 4: 10, 5: 50 },
    6: { 3: 1.5, 4: 5, 5: 25, 6: 100 },
    7: { 4: 2, 5: 10, 6: 50, 7: 200 },
    8: { 4: 1.5, 5: 5, 6: 25, 7: 100, 8: 400 },
    9: { 5: 2, 6: 10, 7: 50, 8: 200, 9: 800 },
    10: { 5: 1.5, 6: 5, 7: 25, 8: 100, 9: 400, 10: 1500 },
  },
  Classic: {
    1: { 1: 3 },
    2: { 1: 1.5, 2: 7 },
    3: { 2: 2.5, 3: 25 },
    4: { 2: 2, 3: 8, 4: 50 },
    5: { 3: 3, 4: 15, 5: 100 },
    6: { 3: 2, 4: 8, 5: 40, 6: 250 },
    7: { 4: 3, 5: 15, 6: 80, 7: 500 },
    8: { 4: 2, 5: 8, 6: 40, 7: 200, 8: 1000 },
    9: { 5: 3, 6: 15, 7: 80, 8: 400, 9: 2000 },
    10: { 5: 2, 6: 8, 7: 40, 8: 200, 9: 1000, 10: 5000 },
  },
  Medium: {
    1: { 1: 3.5 },
    2: { 2: 10 },
    3: { 2: 3, 3: 40 },
    4: { 3: 10, 4: 80 },
    5: { 3: 5, 4: 25, 5: 200 },
    6: { 4: 10, 5: 60, 6: 500 },
    7: { 4: 5, 5: 25, 6: 150, 7: 1000 },
    8: { 5: 10, 6: 60, 7: 400, 8: 2000 },
    9: { 5: 5, 6: 25, 7: 150, 8: 800, 9: 4000 },
    10: { 6: 10, 7: 60, 8: 400, 9: 2000, 10: 8000 },
  },
  High: {
    1: { 1: 3.8 },
    2: { 2: 14 },
    3: { 2: 1, 3: 80 },
    4: { 3: 15, 4: 150 },
    5: { 4: 40, 5: 400 },
    6: { 4: 20, 5: 100, 6: 1000 },
    7: { 5: 40, 6: 300, 7: 2000 },
    8: { 5: 20, 6: 100, 7: 800, 8: 4000 },
    9: { 6: 40, 7: 300, 8: 1600, 9: 8000 },
    10: { 6: 20, 7: 100, 8: 800, 9: 4000, 10: 10000 },
  }
};

// Initialize all missing hit counts with a 0x multiplier
Object.values(PAYOUTS).forEach(riskLevel => {
    for (let picks = 1; picks <= 10; picks++) {
        if (riskLevel[picks]) {
            for (let hits = 0; hits <= picks; hits++) {
                if (riskLevel[picks][hits] === undefined) {
                    riskLevel[picks][hits] = 0;
                }
            }
        }
    }
});
